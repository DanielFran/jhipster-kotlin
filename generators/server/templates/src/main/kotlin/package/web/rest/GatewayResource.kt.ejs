<%#
 Copyright 2018-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest

import <%= packageName %>.web.rest.vm.RouteVM
import <%= packageName %>.security.ADMIN

import org.springframework.cloud.client.discovery.DiscoveryClient
<%_ if (!reactive) { _%>
import org.springframework.cloud.netflix.zuul.filters.RouteLocator
<%_ } else { _%>
import org.springframework.beans.factory.annotation.Value
import org.springframework.cloud.gateway.route.Route
import org.springframework.cloud.gateway.route.RouteLocator
import reactor.core.publisher.Flux
<%_ } _%>
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.security.access.annotation.Secured
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController

/**
 * REST controller for managing Gateway configuration.
 */
@RestController
@RequestMapping("/api/gateway")
class GatewayResource(private val routeLocator: RouteLocator, private val discoveryClient: DiscoveryClient<% if (reactive) { %>, @Value("\${spring.application.name}") val appName: String<% } %>) {

    /**
     * `GET  /routes` : get the active routes.
     *
     * @return the [ResponseEntity] with status `200 (OK)` and with body the list of routes.
     */
    @GetMapping("/routes")
    @Secured(ADMIN)
    fun activeRoutes(): ResponseEntity<List<RouteVM>> {
        <%_ if (!reactive) { _%>
        val routeVMs =
            routeLocator.routes.mapNotNull { route ->
                RouteVM(
                    path = route.fullPath,
                    serviceId = route.id,
                    serviceInstances = discoveryClient.getInstances(route.location)
                )
            }
        <%_ } else { _%>
            val routes = routeLocator.routes
            val routeVMs = mutableListOf<RouteVM>()
            routes.subscribe { route ->
                val routeVM = RouteVM()
                // Manipulate strings to make Gateway routes look like Zuul's
                val predicate = route.predicate.toString()
                val path = predicate.substring(predicate.indexOf("[") + 1, predicate.indexOf("]"))
                routeVM.path = path
                val serviceId = route.id.substring(route.id.indexOf("_") + 1).toLowerCase()
                routeVM.serviceId = serviceId
                // Exclude gateway app from routes
                if (serviceId.toLowerCase() != appName.toLowerCase()) {
                    routeVM.serviceInstances = discoveryClient.getInstances(serviceId)
                    routeVMs.add(routeVM)
                }
            }
        <%_ } _%>
        return ResponseEntity.ok(routeVMs)
    }
}
