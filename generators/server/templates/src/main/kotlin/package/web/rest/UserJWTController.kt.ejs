<%#
 Copyright 2018-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
let withAudit = reactive && ['sql', 'mongodb', 'couchbase', 'neo4j'].includes(databaseType);
_%>
package <%= packageName %>.web.rest

<%_ if (withAudit) { _%>
import <%= packageName %>.config.ANONYMOUS_USER
<%_ } _%>
import <%= packageName %>.security.jwt.JWTFilter
import <%= packageName %>.security.jwt.TokenProvider
<%_ if (withAudit) { _%>
import <%= packageName %>.service.AuditEventService
<%_ } _%>
import <%= packageName %>.web.rest.vm.LoginVM

import com.fasterxml.jackson.annotation.JsonProperty

import org.springframework.http.HttpHeaders
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
<%_ if (reactive) { _%>
import org.springframework.security.authentication.ReactiveAuthenticationManager
<%_ } _%>
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken
<%_ if (withAudit) { _%>
import org.springframework.security.core.Authentication
<%_ } _%>
<%_ if (!reactive) { _%>
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder
import org.springframework.security.core.context.SecurityContextHolder
<%_ } _%>
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController
<%_ if (reactive) { _%>
import reactor.core.publisher.Mono
import reactor.core.scheduler.Schedulers
<%_ } _%>

import javax.validation.Valid

/**
 * Controller to authenticate users.
 */
@RestController
@RequestMapping("/api")
class UserJWTController(
    private val tokenProvider: TokenProvider,
    <% if (!reactive) { %>private val authenticationManagerBuilder: AuthenticationManagerBuilder <% } else { %>
    private val authenticationManager: ReactiveAuthenticationManager<% if (withAudit) { %>,
    private val auditEventService: AuditEventService<% } %>
    <% } %>
) {
    <%_ if (!reactive) { _%>
    @PostMapping("/authenticate")
    fun authorize(@Valid @RequestBody loginVM: LoginVM): ResponseEntity<JWTToken> {

        val authenticationToken = UsernamePasswordAuthenticationToken(loginVM.username, loginVM.password)

        val authentication = authenticationManagerBuilder.getObject().authenticate(authenticationToken)
        SecurityContextHolder.getContext().authentication = authentication
        val rememberMe = loginVM.isRememberMe ?: false
        val jwt = tokenProvider.createToken(authentication, rememberMe)
        val httpHeaders = HttpHeaders()
        httpHeaders.add(JWTFilter.AUTHORIZATION_HEADER, "Bearer $jwt")
        return ResponseEntity(JWTToken(jwt), httpHeaders, HttpStatus.OK)
    }
    <%_ } else { _%>
    @PostMapping("/authenticate")
    fun authorize(@Valid @RequestBody loginVM: Mono<LoginVM>): Mono<ResponseEntity<JWTToken>> =
        loginVM.flatMap { login ->
            authenticationManager.authenticate(UsernamePasswordAuthenticationToken(login.username, login.password))
                <%_ if (withAudit) { _%>
                .onErrorResume { onAuthenticationError(login, it) }
                .flatMap { onAuthenticationSuccess(login, it) }
                <%_ } _%>
                .map { tokenProvider.createToken(it, true == login.isRememberMe) }
        }.map{
            jwt ->
            val httpHeaders = HttpHeaders()
            httpHeaders.add(JWTFilter.AUTHORIZATION_HEADER, "Bearer $jwt")
            ResponseEntity(JWTToken(jwt), httpHeaders, HttpStatus.OK)
        }

        <%_ if (withAudit) { _%>
    private fun onAuthenticationSuccess(login: LoginVM, auth: Authentication): Mono<Authentication> {
        return Mono.just(login)
            .map {it.username}
            .filter { ANONYMOUS_USER != it }
            .flatMap { auditEventService.saveAuthenticationSuccess(it!!) }
            .thenReturn(auth)
    }

    private fun onAuthenticationError(login: LoginVM, throwable: Throwable): Mono<Authentication> {
        return Mono.just(login)
                .map {it.username}
                .filter { ANONYMOUS_USER != it }
                .flatMap { auditEventService.saveAuthenticationError(it!!, throwable) }
                .then(Mono.error(throwable))
    }

    <%_ } _%>
<%_ } _%>

    /**
     * Object to return as body in JWT Authentication.
     */
    class JWTToken(@get:JsonProperty("id_token") var idToken: String?)
}
