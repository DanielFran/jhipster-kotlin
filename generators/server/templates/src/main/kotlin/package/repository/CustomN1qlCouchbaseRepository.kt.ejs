<%#
 Copyright 2018-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.repository

<%_ if (searchEngine === 'couchbase') { _%>
import com.couchbase.client.java.search.SearchQuery
import com.couchbase.client.java.search.queries.AbstractFtsQuery
import com.couchbase.client.java.search.queries.DocIdQuery
import com.couchbase.client.java.search.queries.QueryStringQuery
import com.couchbase.client.java.search.result.SearchQueryResult
import com.couchbase.client.java.search.result.SearchQueryRow
import <%= packageName %>.repository.search.SearchCouchbaseRepository
<%_ } _%>
import org.springframework.data.couchbase.core.CouchbaseOperations
import org.springframework.data.couchbase.core.mapping.CouchbasePersistentEntity
import org.springframework.data.couchbase.repository.query.CouchbaseEntityInformation
import org.springframework.data.couchbase.repository.support.N1qlCouchbaseRepository
<%_ if (searchEngine === 'couchbase') { _%>
import org.springframework.data.domain.Page
import org.springframework.data.domain.PageImpl
import org.springframework.data.domain.Pageable
<%_ } _%>

import java.io.Serializable
<%_ if (searchEngine === 'couchbase') { _%>
import java.util.LinkedList
import java.util.List
import java.util.Optional
import java.util.stream.Collectors
<%_ } _%>

/**
 * A custom implementation of `CouchbaseRepository`.
 *
 * Create a new Repository.
 *
 * @param metadata            the Metadata for the entity.
 * @param couchbaseOperations the reference to the template used.
 */
class CustomN1qlCouchbaseRepository<T, ID : Serializable>(metadata: CouchbaseEntityInformation<T, String>, couchbaseOperations: CouchbaseOperations) :
    N1qlCouchbaseRepository<T, ID>(metadata, couchbaseOperations)<%if (searchEngine === 'couchbase') { %>, SearchCouchbaseRepository<T, ID><% } %> {

    private val persistentEntity: CouchbasePersistentEntity<*>? =
        getCouchbaseOperations().converter.mappingContext.getPersistentEntity(entityInformation.javaType)

    override fun <S : T> save(entity: S): S = super.save(populateIdIfNecessary(entity))

    <%_ if (searchEngine === 'couchbase') { _%>

    fun search(indexName: String, request: String, Pageable pageable): Page<T> {
        val searchQuery = SearchQuery(indexName, queryString(request))
            .limit(pageable.getPageSize())
            .skip(pageable.getOffset() as Int)
        val result = getCouchbaseOperations().getCouchbaseBucket().query(searchQuery)
        val pageContent: List<T> = extractResults(result)
        return PageImpl<>(pageContent, pageable, result.metrics().totalHits())
    }

    override fun search(indexName: String, request: String): List<T> {
        val searchQuery = SearchQuery(indexName, queryString(request))
        return extractResults(getCouchbaseOperations().getCouchbaseBucket().query(searchQuery))
    }

    fun queryString(request: String): AbstractFtsQuery {
        val ids = mutableListOf<String>()
        var req = request
        req.split(" ")
        .filter { it.indexOf("id:") == 0 }
        .map {
            ids.add(it.substring(3))
            req = req.replace(r, "").replaceAll("[ ]+", " ").trim()
        }
        val queryString = SearchQuery.queryString(req)
        if (ids.size != 0) {
            val docIdQuery = SearchQuery.docId(ids.mapToTypedArray { it as String })
            if (!req.isEmpty) {
                return SearchQuery.conjuncts(queryString, docIdQuery)
            }
            return docIdQuery
        }
        return queryString
    }

    @SuppressWarnings("unchecked")
    fun extractResults(result: SearchQueryResult): List<T> {
        return result.hits().stream()
            .map(SearchQueryRow::id)
            .map { it as ID }
            .map(this::findById)
            .filter(Optional::isPresent)
            .map(Optional::get)
    }
<%_ } _%>

    /**
     * Add generated ID to entity if not already set.
     *
     * @param entity the entity to update.
     * @return entity with ID set.
     */
    private fun <S : T> populateIdIfNecessary(entity: S): S {
        if (entityInformation.getId(entity) != null) {
            return entity
        }
        setId(entity, couchbaseOperations.getGeneratedId(entity))
        return entity
    }

    private fun <S : T> setId(entity: S, generatedId: String) {
        persistentEntity!!.getPropertyAccessor(entity).setProperty(persistentEntity.idProperty!!, generatedId)
    }
}
