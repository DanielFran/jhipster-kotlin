<%#
 Copyright 2018-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config

import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.DeserializationFeature
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.SerializationFeature
<%_ if (!reactive) { _%>
import com.github.vanroy.springdata.jest.JestElasticsearchTemplate
import com.github.vanroy.springdata.jest.mapper.DefaultJestResultsMapper
import io.searchbox.client.JestClient
<%_ } _%>
import org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties
import org.springframework.boot.context.properties.EnableConfigurationProperties
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
<%_ if (!reactive) { _%>
import org.springframework.context.annotation.Primary
import org.springframework.data.elasticsearch.core.ElasticsearchOperations
import org.springframework.data.elasticsearch.core.convert.ElasticsearchConverter
<%_ } _%>
import org.springframework.data.elasticsearch.core.EntityMapper
<%_ if (databaseType === 'mongodb' || !reactive) { _%>
import org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchMappingContext
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
import org.springframework.data.elasticsearch.core.mapping.ElasticsearchPersistentProperty
import org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchPersistentProperty
import org.springframework.data.mapping.PersistentEntity
import org.springframework.data.mapping.model.Property
import org.springframework.data.mapping.model.SimpleTypeHolder
import org.springframework.data.elasticsearch.core.mapping.SimpleElasticsearchPersistentEntity
<%_ } _%>
import org.springframework.data.mapping.MappingException

import java.io.IOException

@Configuration
@EnableConfigurationProperties(ElasticsearchProperties::class)
class ElasticsearchConfiguration(private val mapper: ObjectMapper) {

    @Bean
    fun getEntityMapper() = CustomEntityMapper(mapper)

<%_ if (databaseType === 'mongodb') { _%>

    @Bean
    fun mappingContext() = CustomElasticsearchMappingContext()
<%_ } _%>
<%_ if (!reactive) { _%>
    @Bean
    @Primary
    fun elasticsearchTemplate(
        jestClient: JestClient,
        elasticsearchConverter: ElasticsearchConverter,
        mappingContext: SimpleElasticsearchMappingContext,
        mapper: EntityMapper
    ) = JestElasticsearchTemplate(
        jestClient,
        elasticsearchConverter,
        DefaultJestResultsMapper(mappingContext, mapper)
    )
<%_ } _%>

    inner class CustomEntityMapper(private val objectMapper: ObjectMapper) : EntityMapper {

        init {
            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)
            objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true)
            objectMapper.configure(SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS, true)
            objectMapper.configure(SerializationFeature.INDENT_OUTPUT, false)
            objectMapper.configure(DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS, true)
        }

        @Throws(IOException::class)
        override fun mapToString(`object`: Any) = objectMapper.writeValueAsString(`object`)

        @Throws(IOException::class)
        override fun <T> mapToObject(source: String, clazz: Class<T>) = objectMapper.readValue(source, clazz)

        override fun mapObject(source: Any): Map<String, Any> {
            try {
                return objectMapper.readValue(mapToString(source), object: TypeReference<HashMap<String, Any>>() {})
            } catch (e: IOException) {
                throw MappingException(e.message, e)
            }
        }

        override fun <T> readObject(source: Map<String, Any>, targetType: Class<T>): T {
            try {
                return mapToObject(mapToString(source), targetType)
            } catch (e: IOException) {
                throw MappingException(e.message, e)
            }
        }
    }
}
<%_ if (databaseType === 'mongodb') { _%>

/**
* Custom mapping context in order to use the same entities for both MongoDB and Elasticsearch datasources
*/
class CustomElasticsearchMappingContext : SimpleElasticsearchMappingContext() {

    override fun createPersistentProperty(property: Property, owner: SimpleElasticsearchPersistentEntity<*>,
                                          simpleTypeHolder: SimpleTypeHolder): ElasticsearchPersistentProperty =
        CustomElasticsearchPersistentProperty(property, owner, simpleTypeHolder)
}

internal class CustomElasticsearchPersistentProperty(property: Property, owner: PersistentEntity<*, ElasticsearchPersistentProperty>,
                                                     simpleTypeHolder: SimpleTypeHolder
) : SimpleElasticsearchPersistentProperty(property, owner, simpleTypeHolder) {

    override fun isAssociation() = false
}
<%_ } _%>
