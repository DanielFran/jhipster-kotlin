<%#
 Copyright 2018-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config

import com.couchbase.client.java.Cluster
import com.couchbase.client.java.CouchbaseCluster
import com.couchbase.client.java.env.CouchbaseEnvironment
import com.couchbase.client.java.env.DefaultCouchbaseEnvironment
import org.assertj.core.util.Lists
import org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.data.couchbase.config.AbstractCouchbaseConfiguration
import org.springframework.data.couchbase.config.BeanNames
import org.springframework.data.couchbase.config.CouchbaseConfigurer
import org.testcontainers.couchbase.BucketDefinition
import org.testcontainers.couchbase.CouchbaseContainer
import javax.annotation.PostConstruct

@Configuration
class DatabaseConfigurationIT(
    private val couchbaseProperties: CouchbaseProperties
) : AbstractCouchbaseConfiguration() {

    private var _couchbaseContainer: CouchbaseContainer? = null
    val couchbaseContainer: CouchbaseContainer?
        get() {
            if (_couchbaseContainer == null) {
                _couchbaseContainer = CouchbaseContainer("<%= DOCKER_COUCHBASE %>")
                    .withBucket(BucketDefinition(bucketName).withQuota(100))
                    .withCredentials(username, bucketPassword)
                couchbaseContainer?.start()
            }
            return _couchbaseContainer
        }

    private var _couchbaseEnvironment: CouchbaseEnvironment? = null
    val couchbaseEnvironment: CouchbaseEnvironment?
        get() {
            if (_couchbaseEnvironment == null) {
                couchbaseContainer?.bootstrapCarrierDirectPort?.let { carrierPort ->
                    couchbaseContainer?.bootstrapHttpDirectPort?.let { httpPort ->
                        _couchbaseEnvironment = DefaultCouchbaseEnvironment
                            .builder()
                            .bootstrapCarrierDirectPort(carrierPort)
                            .bootstrapHttpDirectPort(httpPort)
                            .build()
                    }
                }
            }
            return _couchbaseEnvironment
        }

    private var _couchbaseCluster: CouchbaseCluster? = null
    val couchbaseCluster: CouchbaseCluster?
        get() {
            if (_couchbaseCluster == null) {
                _couchbaseCluster = CouchbaseCluster.create(couchbaseEnvironment(), couchbaseContainer?.containerIpAddress)
            }
            return _couchbaseCluster
        }

    @Bean(destroyMethod = "", name = [BeanNames.COUCHBASE_ENV])
    override fun couchbaseEnvironment(): CouchbaseEnvironment = couchbaseEnvironment!!

    @Throws(Exception::class)
    override fun couchbaseCluster(): CouchbaseCluster = couchbaseCluster!!

    override fun getBootstrapHosts(): List<String> = listOf(couchbaseContainer?.containerIpAddress!!)

    override fun getBucketName(): String = couchbaseProperties.bucket.name

    override fun getBucketPassword(): String = couchbaseProperties.bucket.password

    override fun couchbaseConfigurer(): CouchbaseConfigurer = this
}
